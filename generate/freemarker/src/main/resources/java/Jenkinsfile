pipeline {
  // 当前版本: Java Release_V1.0.0
  agent {
    // 运行的服务器，maven项目统一使用JenkinsLinux（不可修改）
    label 'JenkinsLinux'
  }

  options {
    // 保留构建的产物和日志的次数
    buildDiscarder(logRotator(numToKeepStr: '10'))
    // 超时时间，120分钟没有构建完成直接失败，防止阻塞其它任务构建（可以根据项目实际情况调整）
    timeout(time: 120, unit: 'MINUTES')
    // 不允许同时执行流水线，可被用来防止同时访问共享资源等
    disableConcurrentBuilds()
    // 每条日志前打印时间
    timestamps()
    // 打印彩色日志
    ansiColor('xterm')
  }

  stages {
    // ******************************** 初始化阶段 ********************************
    stage('init') {
      steps {
        //  脚本化流水线是由 Groovy 构建的通用 DSL
        script {
          // 获取构建提交人和提交信息
          GIT_PUSH_USER = sh(script: "git log --pretty=format:'%an' $env.GIT_COMMIT -1 || echo nobody", returnStdout: true)
          GIT_PUSH_MESSAGE = sh(script: "git log --pretty=format:'%s' $env.GIT_COMMIT -1 || echo noMessage", returnStdout: true)
          names = env.JOB_NAME.split('/')
          APP_NAME = names[0]
          println "\033[34m 代码提交人：" + GIT_PUSH_USER + " \033[0m"
          // 提交人为cicd或者提交信息包含not build均不进行构建
          if (GIT_PUSH_USER == "cicd" || GIT_PUSH_MESSAGE.contains("not build")) {
            currentBuild.result = 'NOT_BUILT'
            println "\033[34m 系统主动中止构建！ \033[0m"
          }
        }
      }
    }



    // ******************************** 构建阶段 ********************************
    stage('build:dev') {
      when {
        branch "develop"
      }
      steps {
        // 构建阶段运行脚本（可以根据项目实际情况调整）
        withMaven(maven: 'linux-apache-maven-3.6.3') {
          withSonarQubeEnv('sonarqube') {
            sh "'mvn' clean org.jacoco:jacoco-maven-plugin:prepare-agent package -P dev org.jacoco:jacoco-maven-plugin:report sonar:sonar -Dsonar.projectKey=${APP_NAME} -Dsonar.projectName=${APP_NAME} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_AUTH_TOKEN}"
          }
        }

        // 检查SonarQube代码质量阈
        script {
          timeout(time: 3, unit: 'MINUTES') {
            // waitForQualityGate插件有bug，重写了该插件，有时会卡住中断，重新构建即可
            def qg = waitForQualityGate(abortPipeline: false)
            if (qg.status != 'OK') {
              currentBuild.result = 'FAILURE'
              sh(script: "git checkout develop")
              sh(script: "git revert -n $env.GIT_COMMIT")
              sh(script: "git add .")
              sh(script: "git commit -m '质量阈不通过,代码打回'")
              sh(script: "git push origin develop")
              deleteDir()
              println "\033[31m 构建失败原因：未通过SonarQube代码质量阈，构建中止，请及时修改! \033[0m"
            }
          }
        }
      }
    }

    stage('build:test') {
      when {
        branch "release"
      }
      steps {
        // 构建阶段运行脚本（可以根据项目实际情况调整）
        withMaven(maven: 'linux-apache-maven-3.6.3') {
          sh "'mvn' clean package -P test"
        }
      }
    }

    stage('build:prod') {
      when {
        branch "master"
      }
      steps {
        // 构建阶段运行脚本（可以根据项目实际情况调整）
        withMaven(maven: 'linux-apache-maven-3.6.3') {
          // 默认master分支的包推送至nexus仓库
          sh "'mvn' clean deploy -P prod"
        }
      }
    }


    // ******************************** 部署阶段 ********************************
    stage('deploy:dev') {
      when {
        branch "develop"
      }
      steps {
          sshPublisher(
            publishers: [
              sshPublisherDesc(
                // 部署服务器简称，如未配置可以联系配置管理工程师添加（需要调整）
                configName: '192.168.0.101',
                transfers: [
                  sshTransfer(
                    cleanRemote: false,
                    // 源文件夹,可以配置多个,用逗号分割
                    sourceFiles: 'target/classes/**,target/*.jar',
                    // 移除原文件夹前缀
                    removePrefix: 'target/',
                    // 远程目录
                    remoteDirectory: '$JOB_NAME',
                    // 忽略路径
                    excludes: '',
                    // 部署脚本配置，结合项目实际情况调整
                    execCommand:
                    '''
                    # 执行部署脚本（可以根据项目实际情况调整）
                    chmod 774 /usr/local/$JOB_NAME/classes/deploy.sh \
                    && bash /usr/local/$JOB_NAME/classes/deploy.sh $JOB_NAME
                    ''',
                    execTimeout: 0,
                    flatten: false,
                    makeEmptyDirs: false,
                    noDefaultExcludes: false,
                    patternSeparator: '[, ]+',
                    remoteDirectorySDF: false
                  )
                ],
                usePromotionTimestamp: false,
                useWorkspaceInPromotion: false,
                verbose: false
              )
            ]
          )
      }
    }

    stage('deploy:test') {
      when {
        branch "release"
      }
      steps {
        sshPublisher(
          publishers: [
            sshPublisherDesc(
              // 部署服务器简称，如未配置可以联系配置管理工程师添加（需要调整）
              configName: '192.168.0.101',
              transfers: [
                sshTransfer(
                  cleanRemote: false,
                  // 源文件夹,可以配置多个,用逗号分割
                  sourceFiles: 'target/classes/*,target/*.jar',
                  // 移除原文件夹前缀
                  removePrefix: 'target/',
                  // 远程目录
                  remoteDirectory: '$JOB_NAME',
                  // 忽略路径
                  excludes: '',
                  // 部署脚本配置，结合项目实际情况调整
                  execCommand:
                  '''
                  # 执行部署脚本（可以根据项目实际情况调整）
                  chmod 774 /usr/local/$JOB_NAME/classes/deploy.sh \
                  && bash /usr/local/$JOB_NAME/classes/deploy.sh $JOB_NAME
                  ''',
                  execTimeout: 0,
                  flatten: false,
                  makeEmptyDirs: false,
                  noDefaultExcludes: false,
                  patternSeparator: '[, ]+',
                  remoteDirectorySDF: false
                )
              ],
              usePromotionTimestamp: false,
              useWorkspaceInPromotion: false,
              verbose: false
            )
          ]
        )
      }
    }

    stage('deploy:prod') {
      when {
        // 正式环境发布前需手动点击确认，若为预生产环境也可取消该步骤
        // beforeInput true
        branch "master"
      }
      // 正式环境发布前需手动点击确认，若为预生产环境也可取消该步骤
      // input {
      //    message "确认发布${JOB_NAME}到生产环境？"
      //    ok "确认"
      // }
      steps {
        sshPublisher(
          publishers: [
            sshPublisherDesc(
              // 部署服务器简称，如未配置可以联系配置管理工程师添加（需要调整）
              configName: '192.168.0.101',
              transfers: [
                sshTransfer(
                  cleanRemote: false,
                  // 源文件夹,可以配置多个,用逗号分割
                  sourceFiles: 'target/classes/*,target/*.jar',
                  // 移除原文件夹前缀
                  removePrefix: 'target/',
                  // 远程目录
                  remoteDirectory: '$JOB_NAME',
                  // 忽略路径
                  excludes: '',
                  // 部署脚本配置，结合项目实际情况调整
                  execCommand:
                  '''
                  # 执行部署脚本（可以根据项目实际情况调整）
                  chmod 774 /usr/local/$JOB_NAME/classes/deploy.sh \
                  && bash /usr/local/$JOB_NAME/classes/deploy.sh $JOB_NAME
                  ''',
                  execTimeout: 0,
                  flatten: false,
                  makeEmptyDirs: false,
                  noDefaultExcludes: false,
                  patternSeparator: '[, ]+',
                  remoteDirectorySDF: false
                )
              ],
              usePromotionTimestamp: false,
              useWorkspaceInPromotion: false,
              verbose: false
            )
          ]
        )
      }
    }


  }

  // ******************************** 构建完成通知 ********************************
  post {
    always {
      script {
        if (GIT_PUSH_USER != "cicd" && !GIT_PUSH_MESSAGE.contains("not build")) {
          // 邮件提醒
          emailext (
            subject: "【构建通知】'${env.JOB_NAME}' 构建 '${currentBuild.result}!'",
            body: '''${SCRIPT,template="huaweisoft.template"}''',
            recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
          )
        }
      }
    }
  }

}
